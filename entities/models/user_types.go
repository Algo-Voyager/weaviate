//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// UserTypes the type of user
//
// swagger:model UserTypes
type UserTypes string

func NewUserTypes(value UserTypes) *UserTypes {
	return &value
}

// Pointer returns a pointer to a freshly-allocated UserTypes.
func (m UserTypes) Pointer() *UserTypes {
	return &m
}

const (

	// UserTypesDb captures enum value "db"
	UserTypesDb UserTypes = "db"

	// UserTypesOidc captures enum value "oidc"
	UserTypesOidc UserTypes = "oidc"
)

// for schema
var userTypesEnum []interface{}

func init() {
	var res []UserTypes
	if err := json.Unmarshal([]byte(`["db","oidc"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userTypesEnum = append(userTypesEnum, v)
	}
}

func (m UserTypes) validateUserTypesEnum(path, location string, value UserTypes) error {
	if err := validate.EnumCase(path, location, value, userTypesEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this user types
func (m UserTypes) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateUserTypesEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this user types based on context it is used
func (m UserTypes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
