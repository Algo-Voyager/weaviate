//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserInfo user info
//
// swagger:model UserInfo
type UserInfo struct {
	// activity status of the returned user
	// Required: true
	Active *bool `json:"active"`

	// The role names associated to the user
	// Required: true
	Roles []string `json:"roles"`

	// The user id of the given user
	// Required: true
	UserID *string `json:"user_id"`

	// type of the returned user
	// Required: true
	// Enum: [dynamic static]
	UserType *string `json:"user_type"`
}

// Validate validates this user info
func (m *UserInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserInfo) validateActive(formats strfmt.Registry) error {
	if err := validate.Required("active", "body", m.Active); err != nil {
		return err
	}

	return nil
}

func (m *UserInfo) validateRoles(formats strfmt.Registry) error {
	if err := validate.Required("roles", "body", m.Roles); err != nil {
		return err
	}

	return nil
}

func (m *UserInfo) validateUserID(formats strfmt.Registry) error {
	if err := validate.Required("user_id", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

var userInfoTypeUserTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dynamic","static"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userInfoTypeUserTypePropEnum = append(userInfoTypeUserTypePropEnum, v)
	}
}

const (

	// UserInfoUserTypeDynamic captures enum value "dynamic"
	UserInfoUserTypeDynamic string = "dynamic"

	// UserInfoUserTypeStatic captures enum value "static"
	UserInfoUserTypeStatic string = "static"
)

// prop value enum
func (m *UserInfo) validateUserTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userInfoTypeUserTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserInfo) validateUserType(formats strfmt.Registry) error {
	if err := validate.Required("user_type", "body", m.UserType); err != nil {
		return err
	}

	// value enum
	if err := m.validateUserTypeEnum("user_type", "body", *m.UserType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user info based on context it is used
func (m *UserInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserInfo) UnmarshalBinary(b []byte) error {
	var res UserInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
