//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AsyncReplicationConfig Config for async replication
//
// swagger:model AsyncReplicationConfig
type AsyncReplicationConfig struct {

	// Optionally specify source/target node pairs with an upper time bound for async replication for collections/shards.
	TargetNodeOverrides []*AsyncReplicationConfigTargetNodeOverridesItems0 `json:"targetNodeOverrides"`
}

// Validate validates this async replication config
func (m *AsyncReplicationConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTargetNodeOverrides(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AsyncReplicationConfig) validateTargetNodeOverrides(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetNodeOverrides) { // not required
		return nil
	}

	for i := 0; i < len(m.TargetNodeOverrides); i++ {
		if swag.IsZero(m.TargetNodeOverrides[i]) { // not required
			continue
		}

		if m.TargetNodeOverrides[i] != nil {
			if err := m.TargetNodeOverrides[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("targetNodeOverrides" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("targetNodeOverrides" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this async replication config based on the context it is used
func (m *AsyncReplicationConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTargetNodeOverrides(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AsyncReplicationConfig) contextValidateTargetNodeOverrides(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TargetNodeOverrides); i++ {

		if m.TargetNodeOverrides[i] != nil {
			if err := m.TargetNodeOverrides[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("targetNodeOverrides" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("targetNodeOverrides" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AsyncReplicationConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AsyncReplicationConfig) UnmarshalBinary(b []byte) error {
	var res AsyncReplicationConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AsyncReplicationConfigTargetNodeOverridesItems0 async replication config target node overrides items0
//
// swagger:model AsyncReplicationConfigTargetNodeOverridesItems0
type AsyncReplicationConfigTargetNodeOverridesItems0 struct {

	// collection Id
	CollectionID string `json:"collectionId,omitempty"`

	// shard Id
	ShardID string `json:"shardId,omitempty"`

	// source node
	SourceNode string `json:"sourceNode,omitempty"`

	// target node
	TargetNode string `json:"targetNode,omitempty"`

	// upper time bound
	UpperTimeBound int64 `json:"upperTimeBound,omitempty"`
}

// Validate validates this async replication config target node overrides items0
func (m *AsyncReplicationConfigTargetNodeOverridesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this async replication config target node overrides items0 based on context it is used
func (m *AsyncReplicationConfigTargetNodeOverridesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AsyncReplicationConfigTargetNodeOverridesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AsyncReplicationConfigTargetNodeOverridesItems0) UnmarshalBinary(b []byte) error {
	var res AsyncReplicationConfigTargetNodeOverridesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
