// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	apikey "github.com/weaviate/weaviate/usecases/auth/authentication/apikey"
	authorization "github.com/weaviate/weaviate/usecases/auth/authorization"

	mock "github.com/stretchr/testify/mock"
)

// DynamicUserAndRolesGetter is an autogenerated mock type for the DynamicUserAndRolesGetter type
type DynamicUserAndRolesGetter struct {
	mock.Mock
}

// CheckUserIdentifierExists provides a mock function with given fields: userIdentifier
func (_m *DynamicUserAndRolesGetter) CheckUserIdentifierExists(userIdentifier string) (bool, error) {
	ret := _m.Called(userIdentifier)

	if len(ret) == 0 {
		panic("no return value specified for CheckUserIdentifierExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(userIdentifier)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(userIdentifier)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userIdentifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: userId, secureHash, userIdentifier
func (_m *DynamicUserAndRolesGetter) CreateUser(userId string, secureHash string, userIdentifier string) error {
	ret := _m.Called(userId, secureHash, userIdentifier)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(userId, secureHash, userIdentifier)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: userId
func (_m *DynamicUserAndRolesGetter) DeleteUser(userId string) error {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRolesForUser provides a mock function with given fields: user
func (_m *DynamicUserAndRolesGetter) GetRolesForUser(user string) (map[string][]authorization.Policy, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GetRolesForUser")
	}

	var r0 map[string][]authorization.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string][]authorization.Policy, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(string) map[string][]authorization.Policy); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]authorization.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: userIds
func (_m *DynamicUserAndRolesGetter) GetUsers(userIds ...string) (map[string]*apikey.User, error) {
	_va := make([]interface{}, len(userIds))
	for _i := range userIds {
		_va[_i] = userIds[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 map[string]*apikey.User
	var r1 error
	if rf, ok := ret.Get(0).(func(...string) (map[string]*apikey.User, error)); ok {
		return rf(userIds...)
	}
	if rf, ok := ret.Get(0).(func(...string) map[string]*apikey.User); ok {
		r0 = rf(userIds...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*apikey.User)
		}
	}

	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(userIds...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RotateKey provides a mock function with given fields: userId, secureHash
func (_m *DynamicUserAndRolesGetter) RotateKey(userId string, secureHash string) error {
	ret := _m.Called(userId, secureHash)

	if len(ret) == 0 {
		panic("no return value specified for RotateKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userId, secureHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDynamicUserAndRolesGetter creates a new instance of DynamicUserAndRolesGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDynamicUserAndRolesGetter(t interface {
	mock.TestingT
	Cleanup(func())
},
) *DynamicUserAndRolesGetter {
	mock := &DynamicUserAndRolesGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
