//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/weaviate/weaviate/entities/models"
)

// SuspendUserReader is a Reader for the SuspendUser structure.
type SuspendUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SuspendUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSuspendUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSuspendUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSuspendUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSuspendUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSuspendUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewSuspendUserUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSuspendUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSuspendUserOK creates a SuspendUserOK with default headers values
func NewSuspendUserOK() *SuspendUserOK {
	return &SuspendUserOK{}
}

/*
SuspendUserOK describes a response with status code 200, with default header values.

users successfully suspended
*/
type SuspendUserOK struct {
}

// IsSuccess returns true when this suspend user o k response has a 2xx status code
func (o *SuspendUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this suspend user o k response has a 3xx status code
func (o *SuspendUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this suspend user o k response has a 4xx status code
func (o *SuspendUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this suspend user o k response has a 5xx status code
func (o *SuspendUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this suspend user o k response a status code equal to that given
func (o *SuspendUserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the suspend user o k response
func (o *SuspendUserOK) Code() int {
	return 200
}

func (o *SuspendUserOK) Error() string {
	return fmt.Sprintf("[POST /users/{user_id}/suspend][%d] suspendUserOK ", 200)
}

func (o *SuspendUserOK) String() string {
	return fmt.Sprintf("[POST /users/{user_id}/suspend][%d] suspendUserOK ", 200)
}

func (o *SuspendUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSuspendUserBadRequest creates a SuspendUserBadRequest with default headers values
func NewSuspendUserBadRequest() *SuspendUserBadRequest {
	return &SuspendUserBadRequest{}
}

/*
SuspendUserBadRequest describes a response with status code 400, with default header values.

Malformed request.
*/
type SuspendUserBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this suspend user bad request response has a 2xx status code
func (o *SuspendUserBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this suspend user bad request response has a 3xx status code
func (o *SuspendUserBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this suspend user bad request response has a 4xx status code
func (o *SuspendUserBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this suspend user bad request response has a 5xx status code
func (o *SuspendUserBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this suspend user bad request response a status code equal to that given
func (o *SuspendUserBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the suspend user bad request response
func (o *SuspendUserBadRequest) Code() int {
	return 400
}

func (o *SuspendUserBadRequest) Error() string {
	return fmt.Sprintf("[POST /users/{user_id}/suspend][%d] suspendUserBadRequest  %+v", 400, o.Payload)
}

func (o *SuspendUserBadRequest) String() string {
	return fmt.Sprintf("[POST /users/{user_id}/suspend][%d] suspendUserBadRequest  %+v", 400, o.Payload)
}

func (o *SuspendUserBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SuspendUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSuspendUserUnauthorized creates a SuspendUserUnauthorized with default headers values
func NewSuspendUserUnauthorized() *SuspendUserUnauthorized {
	return &SuspendUserUnauthorized{}
}

/*
SuspendUserUnauthorized describes a response with status code 401, with default header values.

Unauthorized or invalid credentials.
*/
type SuspendUserUnauthorized struct {
}

// IsSuccess returns true when this suspend user unauthorized response has a 2xx status code
func (o *SuspendUserUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this suspend user unauthorized response has a 3xx status code
func (o *SuspendUserUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this suspend user unauthorized response has a 4xx status code
func (o *SuspendUserUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this suspend user unauthorized response has a 5xx status code
func (o *SuspendUserUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this suspend user unauthorized response a status code equal to that given
func (o *SuspendUserUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the suspend user unauthorized response
func (o *SuspendUserUnauthorized) Code() int {
	return 401
}

func (o *SuspendUserUnauthorized) Error() string {
	return fmt.Sprintf("[POST /users/{user_id}/suspend][%d] suspendUserUnauthorized ", 401)
}

func (o *SuspendUserUnauthorized) String() string {
	return fmt.Sprintf("[POST /users/{user_id}/suspend][%d] suspendUserUnauthorized ", 401)
}

func (o *SuspendUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSuspendUserForbidden creates a SuspendUserForbidden with default headers values
func NewSuspendUserForbidden() *SuspendUserForbidden {
	return &SuspendUserForbidden{}
}

/*
SuspendUserForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SuspendUserForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this suspend user forbidden response has a 2xx status code
func (o *SuspendUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this suspend user forbidden response has a 3xx status code
func (o *SuspendUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this suspend user forbidden response has a 4xx status code
func (o *SuspendUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this suspend user forbidden response has a 5xx status code
func (o *SuspendUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this suspend user forbidden response a status code equal to that given
func (o *SuspendUserForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the suspend user forbidden response
func (o *SuspendUserForbidden) Code() int {
	return 403
}

func (o *SuspendUserForbidden) Error() string {
	return fmt.Sprintf("[POST /users/{user_id}/suspend][%d] suspendUserForbidden  %+v", 403, o.Payload)
}

func (o *SuspendUserForbidden) String() string {
	return fmt.Sprintf("[POST /users/{user_id}/suspend][%d] suspendUserForbidden  %+v", 403, o.Payload)
}

func (o *SuspendUserForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SuspendUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSuspendUserNotFound creates a SuspendUserNotFound with default headers values
func NewSuspendUserNotFound() *SuspendUserNotFound {
	return &SuspendUserNotFound{}
}

/*
SuspendUserNotFound describes a response with status code 404, with default header values.

user not found
*/
type SuspendUserNotFound struct {
}

// IsSuccess returns true when this suspend user not found response has a 2xx status code
func (o *SuspendUserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this suspend user not found response has a 3xx status code
func (o *SuspendUserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this suspend user not found response has a 4xx status code
func (o *SuspendUserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this suspend user not found response has a 5xx status code
func (o *SuspendUserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this suspend user not found response a status code equal to that given
func (o *SuspendUserNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the suspend user not found response
func (o *SuspendUserNotFound) Code() int {
	return 404
}

func (o *SuspendUserNotFound) Error() string {
	return fmt.Sprintf("[POST /users/{user_id}/suspend][%d] suspendUserNotFound ", 404)
}

func (o *SuspendUserNotFound) String() string {
	return fmt.Sprintf("[POST /users/{user_id}/suspend][%d] suspendUserNotFound ", 404)
}

func (o *SuspendUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSuspendUserUnprocessableEntity creates a SuspendUserUnprocessableEntity with default headers values
func NewSuspendUserUnprocessableEntity() *SuspendUserUnprocessableEntity {
	return &SuspendUserUnprocessableEntity{}
}

/*
SuspendUserUnprocessableEntity describes a response with status code 422, with default header values.

Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?
*/
type SuspendUserUnprocessableEntity struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this suspend user unprocessable entity response has a 2xx status code
func (o *SuspendUserUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this suspend user unprocessable entity response has a 3xx status code
func (o *SuspendUserUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this suspend user unprocessable entity response has a 4xx status code
func (o *SuspendUserUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this suspend user unprocessable entity response has a 5xx status code
func (o *SuspendUserUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this suspend user unprocessable entity response a status code equal to that given
func (o *SuspendUserUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the suspend user unprocessable entity response
func (o *SuspendUserUnprocessableEntity) Code() int {
	return 422
}

func (o *SuspendUserUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /users/{user_id}/suspend][%d] suspendUserUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *SuspendUserUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /users/{user_id}/suspend][%d] suspendUserUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *SuspendUserUnprocessableEntity) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SuspendUserUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSuspendUserInternalServerError creates a SuspendUserInternalServerError with default headers values
func NewSuspendUserInternalServerError() *SuspendUserInternalServerError {
	return &SuspendUserInternalServerError{}
}

/*
SuspendUserInternalServerError describes a response with status code 500, with default header values.

An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.
*/
type SuspendUserInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this suspend user internal server error response has a 2xx status code
func (o *SuspendUserInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this suspend user internal server error response has a 3xx status code
func (o *SuspendUserInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this suspend user internal server error response has a 4xx status code
func (o *SuspendUserInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this suspend user internal server error response has a 5xx status code
func (o *SuspendUserInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this suspend user internal server error response a status code equal to that given
func (o *SuspendUserInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the suspend user internal server error response
func (o *SuspendUserInternalServerError) Code() int {
	return 500
}

func (o *SuspendUserInternalServerError) Error() string {
	return fmt.Sprintf("[POST /users/{user_id}/suspend][%d] suspendUserInternalServerError  %+v", 500, o.Payload)
}

func (o *SuspendUserInternalServerError) String() string {
	return fmt.Sprintf("[POST /users/{user_id}/suspend][%d] suspendUserInternalServerError  %+v", 500, o.Payload)
}

func (o *SuspendUserInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SuspendUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
SuspendUserBody suspend user body
swagger:model SuspendUserBody
*/
type SuspendUserBody struct {

	// if the key should be deactivated when suspending the user
	DeactivateKey *bool `json:"deactivate_key,omitempty"`
}

// Validate validates this suspend user body
func (o *SuspendUserBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this suspend user body based on context it is used
func (o *SuspendUserBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SuspendUserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SuspendUserBody) UnmarshalBinary(b []byte) error {
	var res SuspendUserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
